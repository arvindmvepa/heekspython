#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Fri Jul 24 14:50:26 2009

import HeeksPython as cad
import math
import wx

# begin wxGlade: extracode
# end wxGlade



class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.x_center_label = wx.StaticText(self, -1, "X center")
        self.x_center_entry = wx.TextCtrl(self, -1, "")
        self.y_center_label = wx.StaticText(self, -1, "Y center")
        self.y_center_entry = wx.TextCtrl(self, -1, "")
        self.z_center_label = wx.StaticText(self, -1, "Z center")
        self.z_center_entry = wx.TextCtrl(self, -1, "")
        self.number_points_label = wx.StaticText(self, -1, "Number of Points")
        self.no_of_holes_entry = wx.TextCtrl(self, -1, "")
        self.diameter_label = wx.StaticText(self, -1, "Polar Array Diameter")
        self.bolt_circle_diameter_entry = wx.TextCtrl(self, -1, "")
        self.angle_label = wx.StaticText(self, -1, "Starting Angle")
        self.start_angle_entry = wx.TextCtrl(self, -1, "")
        self.scale_label = wx.StaticText(self, -1, "Scale")
        self.Scale_entry = wx.TextCtrl(self, -1, "")
        self.GenButton = wx.Button(self, -1, "Generate Points")
        self.quit = wx.Button(self, -1, "Close")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.GenCode, self.GenButton)
        self.Bind(wx.EVT_BUTTON, self.OnCloseMe, self.quit)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("Generate Polar Array of Points")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        grid_sizer_1 = wx.GridSizer(9, 2, 0, 0)
        grid_sizer_1.Add(self.x_center_label, 0, wx.ALIGN_RIGHT, 0)
        grid_sizer_1.Add(self.x_center_entry, 0, 0, 0)
        grid_sizer_1.Add(self.y_center_label, 0, wx.ALIGN_RIGHT, 0)
        grid_sizer_1.Add(self.y_center_entry, 0, 0, 0)
        grid_sizer_1.Add(self.z_center_label, 0, wx.ALIGN_RIGHT, 0)
        grid_sizer_1.Add(self.z_center_entry, 0, 0, 0)
        grid_sizer_1.Add(self.number_points_label, 0, wx.ALIGN_RIGHT, 0)
        grid_sizer_1.Add(self.no_of_holes_entry, 0, 0, 0)
        grid_sizer_1.Add(self.diameter_label, 0, wx.ALIGN_RIGHT, 0)
        grid_sizer_1.Add(self.bolt_circle_diameter_entry, 0, 0, 0)
        grid_sizer_1.Add(self.angle_label, 0, wx.ALIGN_RIGHT, 0)
        grid_sizer_1.Add(self.start_angle_entry, 0, 0, 0)
        grid_sizer_1.Add(self.scale_label, 0, wx.ALIGN_RIGHT, 0)
        grid_sizer_1.Add(self.Scale_entry, 0, 0, 0)
        grid_sizer_1.Add(self.GenButton, 0, 0, 0)
        grid_sizer_1.Add(self.quit, 0, 0, 0)
        self.SetSizer(grid_sizer_1)
        grid_sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

    def OnCloseMe(self, event): # wxGlade: MyFrame.<event_handler>
        print "We're Done!!!!!"
        self.Destroy()




    def GenCode(self, event): # wxGlade: MyFrame.<event_handler>
        cad.sketch()
        sketch = cad.getlastobj()        
        
        x_center=float(self.x_center_entry.GetValue())
        y_center=float(self.y_center_entry.GetValue())
        z_center=float(self.z_center_entry.GetValue())
        no_of_holes=float(self.no_of_holes_entry.GetValue())
        bolt_circle_diameter=float(self.bolt_circle_diameter_entry.GetValue())
        start_angle=float(self.start_angle_entry.GetValue())
        scale=float(self.Scale_entry.GetValue())    
        count = 0
        anglecount=1   
        circle_division_angle=(360/no_of_holes)
        calc_angle=start_angle




        while (count < no_of_holes):
	    x1=math.cos(math.radians(calc_angle))*(bolt_circle_diameter/2)
	    y1=math.sin(math.radians(calc_angle))*(bolt_circle_diameter/2)
            x=(x1+x_center)*scale
            y=(y1+y_center)*scale        
            z=(z_center)*scale

            cad.point(x,y,z)
            cad.add(sketch,cad.getlastobj())            
            data=str('X%.4f Y%.4f Z%.4f '% (x, y, z)+'\n')
            
            print data

           
                      

    	    anglecount=anglecount+1
	    
    	    calc_angle=calc_angle + circle_division_angle	

            count=count+1
        cad.reorder(sketch);
        return sketch        
# end of class MyFrame

#we don't need the next section of code- it would crash Heeks
'''if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = MyFrame(None, -1, "")
    app.SetTopWindow(frame_1)
    frame_1.Show()
    app.MainLoop()'''
